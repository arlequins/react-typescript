def s3Deploy = new java.util.HashMap()

if (project.hasProperty('deploy:s3')) {
  def accessKeyId = "$accessKeyId"
  def secrectAccessKey = "$secrectAccessKey"
  s3Deploy = [
    AWS_ACCESS_KEY_ID: accessKeyId,
    AWS_SECRET_ACCESS_KEY: secrectAccessKey,
    DEPLOY_PATH: "$deployPath",
    AWS_BUCKET: "$awsBucket",
    BASE_PATH: "$basePath"
  ]
}

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    jcenter()
  }
  dependencies {
    classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
    classpath "org.hidetake:gradle-ssh-plugin:2.9.0"
  }
}

allprojects {
}

project(':backend') {
  apply plugin: 'org.hidetake.ssh'

  def fromFolder = "$project.projectDir"
  def destFolder = '/usr/local/share/app'

  remotes {
    web01 {
      role 'masterNode'
      host = 'localhost'
      user = 'setine'
      port = 23
      identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
  }

  task publishServer {
    doLast {
      ssh.run {
        session(remotes.web01) {
          def deleteCurrentProcess = execute 'pm2 delete all'

          new File(fromFolder).listFiles().each{put (from:it, into:destFolder)}

          def initialInstall = execute "cd $destFolder && npm install"
          def registerWorker = execute "pm2 start $destFolder/pm2/dev.json --env dev"
          def reload = execute 'sudo systemctl restart nginx'
        }
      }
    }
  }
}

project(':frontend') {
  apply plugin: 'com.moowork.node'

  node {
    npmVersion = '6.1.0'
    version = '8.9.4'
    download = true
  }

  task build(type: NpmTask) {
    args = ['run', 'build']
  }

  task deployServer(dependsOn: build, type: Copy) {
    from "$project.projectDir/dist"
    into "$project.projectDir/../backend/www"
    include "**/*.*"
  }

  task deployS3(type: NpmTask) {
    environment = s3Deploy
    args = ['run', 'deploy:s3']
  }

  build.dependsOn npm_install
  deployS3.dependsOn npm_install
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8.1'
}
